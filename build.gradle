plugins {
    id 'java'
    id 'io.qameta.allure' version '2.9.3'
}

group 'com.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

def allureVersion = '2.29.0'

ext {
    junitVersion = '5.10.2'
    ownerVersion = "1.0.12"
}

sourceCompatibility = '22'
targetCompatibility = '22'

dependencies {
    testImplementation "com.codeborne:selenide:7.4.3"
    testImplementation "org.aeonbits.owner:owner:${ownerVersion}"
    testImplementation "io.qameta.allure:allure-selenide:${allureVersion}"
    testImplementation "org.slf4j:slf4j-simple:2.0.13"
    testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testImplementation "org.aspectj:aspectjrt:1.9.22" // Обновленная версия
    testImplementation "org.aspectj:aspectjweaver:1.9.22" // Обновленная версия
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.11.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.10.2'
    testImplementation 'com.codeborne:selenide-proxy:7.4.3'
    testImplementation("com.codeborne:selenide-selenoid:7.4.3")

}

test {
    useJUnitPlatform()

    systemProperties System.getProperties()

    if (System.getProperty("threads") != null) {
        systemProperties.putAll([
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads").toInteger()
        ])
    }

    testLogging {
        events "started", "skipped", "failed", "standard_error", "standard_out"
        exceptionFormat "short"
    }
}

allure {
    report {
        version.set(allureVersion)
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
}

compileJava {
    options.encoding = 'UTF-8'
}

compileTestJava {
    options.encoding = 'UTF-8'
}
